import { Interface } from 'ethers/lib/utils';
import { BigNumber, Contract, ContractTransaction } from 'ethers';
import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/dist/src/signer-with-address';
import { BigNumberish } from '@helpers/numbers';
import { TimelockAuthorizerDeployment } from './types';
import { Account, NAry, TxParams } from '../types/types';
export default class TimelockAuthorizer {
    static EVERYWHERE: string;
    instance: Contract;
    root: SignerWithAddress;
    static create(deployment?: TimelockAuthorizerDeployment): Promise<TimelockAuthorizer>;
    constructor(instance: Contract, root: SignerWithAddress);
    get address(): string;
    get interface(): Interface;
    hasPermission(action: string, account: Account, where: Account): Promise<boolean>;
    getPermissionId(action: string, account: Account, where: Account): Promise<string>;
    isRoot(account: Account): Promise<boolean>;
    isPendingRoot(account: Account): Promise<boolean>;
    isExecutor(scheduledExecutionId: BigNumberish, account: Account): Promise<boolean>;
    isCanceler(scheduledExecutionId: BigNumberish, account: Account): Promise<boolean>;
    delay(action: string): Promise<BigNumber>;
    getActionIdRevokeDelay(actionId: string): Promise<BigNumber>;
    getActionIdGrantDelay(actionId: string): Promise<BigNumber>;
    getScheduledExecution(id: BigNumberish): Promise<{
        executed: boolean;
        cancelled: boolean;
        protected: boolean;
        executableAt: BigNumber;
        data: string;
        where: string;
    }>;
    canPerform(action: string, account: Account, where: Account): Promise<boolean>;
    isGranter(actionId: string, account: Account, where: Account): Promise<boolean>;
    isRevoker(account: Account, where: Account): Promise<boolean>;
    scheduleRootChange(root: Account, executors: Account[], params?: TxParams): Promise<number>;
    claimRoot(params?: TxParams): Promise<ContractTransaction>;
    scheduleDelayChange(action: string, delay: BigNumberish, executors: Account[], params?: TxParams): Promise<number>;
    scheduleGrantDelayChange(action: string, delay: BigNumberish, executors: Account[], params?: TxParams): Promise<number>;
    scheduleRevokeDelayChange(action: string, delay: BigNumberish, executors: Account[], params?: TxParams): Promise<number>;
    schedule(where: Account, data: string, executors: Account[], params?: TxParams): Promise<number>;
    scheduleGrantPermission(action: string, account: Account, where: Account, executors: Account[], params?: TxParams): Promise<number>;
    scheduleRevokePermission(action: string, account: Account, where: Account, executors: Account[], params?: TxParams): Promise<number>;
    execute(id: BigNumberish, params?: TxParams): Promise<ContractTransaction>;
    cancel(id: BigNumberish, params?: TxParams): Promise<ContractTransaction>;
    addCanceler(scheduledExecutionId: BigNumberish, account: Account, params?: TxParams): Promise<ContractTransaction>;
    removeCanceler(scheduledExecutionId: BigNumberish, account: Account, params?: TxParams): Promise<ContractTransaction>;
    addGranter(action: string, account: Account, where: Account, params?: TxParams): Promise<ContractTransaction>;
    removeGranter(action: string, account: Account, wheres: Account, params?: TxParams): Promise<ContractTransaction>;
    addRevoker(account: Account, where: Account, params?: TxParams): Promise<ContractTransaction>;
    removeRevoker(account: Account, wheres: Account, params?: TxParams): Promise<ContractTransaction>;
    grantPermission(action: string, account: Account, where: Account, params?: TxParams): Promise<ContractTransaction>;
    revokePermission(action: string, account: Account, where: Account, params?: TxParams): Promise<ContractTransaction>;
    renouncePermission(action: string, where: Account, params?: TxParams): Promise<ContractTransaction>;
    grantPermissionGlobally(action: string, account: Account, params?: TxParams): Promise<ContractTransaction>;
    revokePermissionGlobally(action: string, account: Account, params?: TxParams): Promise<ContractTransaction>;
    renouncePermissionGlobally(action: string, params: TxParams): Promise<ContractTransaction>;
    scheduleAndExecuteDelayChange(action: string, delay: number, params?: TxParams): Promise<void>;
    scheduleAndExecuteGrantDelayChange(action: string, delay: number, params?: TxParams): Promise<void>;
    scheduleAndExecuteRevokeDelayChange(action: string, delay: number, params?: TxParams): Promise<void>;
    toAddress(account: Account): string;
    toAddresses(accounts: NAry<Account>): string[];
    toList<T>(items: NAry<T>): T[];
    with(params?: TxParams): Contract;
}
